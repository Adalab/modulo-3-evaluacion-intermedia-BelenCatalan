{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","components/App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","className","src","url","alt","name","types","map","type","index","key","evolution","PokeList","pokemons","pokemon","id","App","useState","pokemonsData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g0DAkCeA,MA/Bf,SAAiBC,GAMf,OACE,yBAAKC,UAAU,kCACb,wBAAIA,UAAU,wBACZ,4BACE,yBAAKC,IAAKF,EAAMG,IAAKC,IAAKJ,EAAMK,QAElC,4BAAKL,EAAMK,MACX,wBAAIJ,UAAU,wBAXXD,EAAMM,MAAMC,KAAI,SAACC,EAAMC,GAC5B,OAAO,wBAAIC,IAAKD,GAAQD,OAWtB,4BAAKR,EAAMW,cCQJC,MArBf,SAAkBZ,GAUhB,OACE,yBAAKC,UAAU,iBACb,wBAAIA,UAAU,gCAVTD,EAAMa,SAASN,KAAI,SAACO,GACzB,OACE,wBAAIJ,IAAKI,EAAQC,IACf,kBAAC,EAAD,CAASL,IAAKI,EAAQC,GAAIA,GAAID,EAAQC,GAAIV,KAAMS,EAAQT,KAAMC,MAAOQ,EAAQR,MAAOH,IAAKW,EAAQX,IAAKQ,UAAWG,EAAQH,mBCMpHK,MAVf,WAAgB,IAAD,EACMC,mBAASC,GAArBL,EADM,oBAEb,OACE,yBAAKZ,UAAU,IACb,wBAAIA,UAAU,mBAAd,uBACA,kBAAC,EAAD,CAAUY,SAAUA,MCENM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.885069b7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Pokemon(props) {\n  const renderTypes = () => {\n    return props.types.map((type, index) => {\n      return <li key={index}>{type}</li>;\n    });\n  };\n  return (\n    <div className=\"pokemon__border pokemon__style\">\n      <ul className=\"pokemon__list--style\">\n        <li>\n          <img src={props.url} alt={props.name} />\n        </li>\n        <li>{props.name}</li>\n        <ul className=\"pokemon__list--style\">{renderTypes()}</ul>\n        <li>{props.evolution}</li>\n      </ul>\n    </div>\n  );\n}\n\nPokemon.propTypes = {\n  pokemon: PropTypes.shape({\n    id: PropTypes.number,\n    key: PropTypes.number,\n    name: PropTypes.string,\n    types: PropTypes.array,\n    url: PropTypes.string,\n    evolution: PropTypes.string,\n  }),\n};\n\nexport default Pokemon;\n","import React from 'react';\nimport Pokemon from './Pokemon';\nimport PropTypes from 'prop-types';\n\nfunction PokeList(props) {\n  const renderPokemons = () => {\n    return props.pokemons.map((pokemon) => {\n      return (\n        <li key={pokemon.id}>\n          <Pokemon key={pokemon.id} id={pokemon.id} name={pokemon.name} types={pokemon.types} url={pokemon.url} evolution={pokemon.evolution} />\n        </li>\n      );\n    });\n  };\n  return (\n    <div className=\"section__grid\">\n      <ul className=\"pokemon__list--style wrapper\">{renderPokemons()}</ul>\n    </div>\n  );\n}\n\nPokeList.propTypes = {\n  characters: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default PokeList;\n","import React, { useState } from 'react';\nimport '../stylesheets/App.css';\nimport pokemonsData from '../data/Plist.json';\nimport PokeList from './PokeList';\n\nfunction App() {\n  const [pokemons] = useState(pokemonsData);\n  return (\n    <div className=\"\">\n      <h1 className=\"pokemon__header\">Mi lista de pokemon</h1>\n      <PokeList pokemons={pokemons} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}